{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport _regeneratorRuntime from \"/home/shivam/Desktop/tradetrek/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/shivam/Desktop/tradetrek/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport Highcharts from 'highcharts';\nimport HighchartsVue from 'highcharts-vue';\nexport default {\n  name: 'StockChart',\n  data: function data() {\n    return {\n      chartOptions: {\n        title: {\n          text: 'Dow Jones Industrial Average'\n        },\n        series: [{\n          name: 'DJIA',\n          data: [] // Data will be populated later\n        }]\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData: function fetchData() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, data, prices, timestamps, formattedData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('https://query1.finance.yahoo.com/v8/finance/chart/%5EDJI?range=1d&interval=1m');\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n            case 6:\n              data = _context.sent;\n              // Process and format the data for Highcharts\n              prices = data.chart.result[0].indicators.quote[0].close;\n              timestamps = data.chart.result[0].timestamp;\n              formattedData = timestamps.map(function (time, index) {\n                return [time * 1000, prices[index]];\n              }); // Update the chart options\n              _this.chartOptions.series[0].data = formattedData;\n              _context.next = 16;\n              break;\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching data:', _context.t0);\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 13]]);\n      }))();\n    }\n  },\n  created: function created() {\n    // Register HighchartsVue\n    HighchartsVue.install(Highcharts);\n  }\n};","map":{"version":3,"names":["Highcharts","HighchartsVue","name","data","chartOptions","title","text","series","mounted","fetchData","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","prices","timestamps","formattedData","wrap","_callee$","_context","prev","next","fetch","sent","json","chart","result","indicators","quote","close","timestamp","map","time","index","t0","console","error","stop","created","install"],"sources":["/home/shivam/Desktop/tradetrek/frontend/src/components/StockChart.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts :options=\"chartOptions\" />\n  </div>\n</template>\n\n<script>\nimport Highcharts from 'highcharts';\nimport HighchartsVue from 'highcharts-vue';\n\nexport default {\n  name: 'StockChart',\n  data() {\n    return {\n      chartOptions: {\n        title: {\n          text: 'Dow Jones Industrial Average',\n        },\n        series: [\n          {\n            name: 'DJIA',\n            data: [], // Data will be populated later\n          },\n        ],\n      },\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await fetch('https://query1.finance.yahoo.com/v8/finance/chart/%5EDJI?range=1d&interval=1m');\n        const data = await response.json();\n        \n        // Process and format the data for Highcharts\n        const prices = data.chart.result[0].indicators.quote[0].close;\n        const timestamps = data.chart.result[0].timestamp;\n\n        const formattedData = timestamps.map((time, index) => [time * 1000, prices[index]]);\n        \n        // Update the chart options\n        this.chartOptions.series[0].data = formattedData;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n  },\n  created() {\n    // Register HighchartsVue\n    HighchartsVue.install(Highcharts);\n  },\n};\n</script>\n\n<style scoped>\n/* Add any styles for your chart here */\n</style>\n"],"mappings":";;;;;;AAOA,OAAOA,UAAS,MAAO,YAAY;AACnC,OAAOC,aAAY,MAAO,gBAAgB;AAE1C,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;QACZC,KAAK,EAAE;UACLC,IAAI,EAAE;QACR,CAAC;QACDC,MAAM,EAAE,CACN;UACEL,IAAI,EAAE,MAAM;UACZC,IAAI,EAAE,EAAE,CAAE;QACZ,CAAC;MAEL;IACF,CAAC;EACH,CAAC;EACDK,OAAO,WAAPA,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAO,EAAE;IACDD,SAAS,WAATA,SAASA,CAAA,EAAG;MAAA,IAAAE,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,QAAA,EAAAb,IAAA,EAAAc,MAAA,EAAAC,UAAA,EAAAC,aAAA;QAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAESC,KAAK,CAAC,+EAA+E,CAAC;YAAA;cAAvGT,QAAO,GAAAM,QAAA,CAAAI,IAAA;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OACMR,QAAQ,CAACW,IAAI,CAAC,CAAC;YAAA;cAA5BxB,IAAG,GAAAmB,QAAA,CAAAI,IAAA;cAET;cACMT,MAAK,GAAId,IAAI,CAACyB,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK;cACvDd,UAAS,GAAIf,IAAI,CAACyB,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACI,SAAS;cAE3Cd,aAAY,GAAID,UAAU,CAACgB,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;gBAAA,OAAK,CAACD,IAAG,GAAI,IAAI,EAAElB,MAAM,CAACmB,KAAK,CAAC,CAAC;cAAA,EAAC,EAEnF;cACAzB,KAAI,CAACP,YAAY,CAACG,MAAM,CAAC,CAAC,CAAC,CAACJ,IAAG,GAAIgB,aAAa;cAAAG,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAe,EAAA,GAAAf,QAAA;cAEhDgB,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAAjB,QAAA,CAAAe,EAAO,CAAC;YAAA;YAAA;cAAA,OAAAf,QAAA,CAAAkB,IAAA;UAAA;QAAA,GAAAzB,OAAA;MAAA;IAEhD;EACF,CAAC;EACD0B,OAAO,WAAPA,OAAOA,CAAA,EAAG;IACR;IACAxC,aAAa,CAACyC,OAAO,CAAC1C,UAAU,CAAC;EACnC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}