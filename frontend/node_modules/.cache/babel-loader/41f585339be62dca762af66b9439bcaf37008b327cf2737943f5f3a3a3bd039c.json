{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport Highcharts from 'highcharts';\nimport HighchartsVue from 'highcharts-vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    highcharts: HighchartsVue.component\n  },\n  data: function data() {\n    return {\n      chartOptions: {\n        rangeSelector: {\n          selected: 1\n        },\n        title: {\n          text: 'Dow Jones Industrial Average (DJI)'\n        },\n        series: [{\n          name: 'Dow Jones',\n          data: [],\n          // Dow Jones data will be populated here\n          tooltip: {\n            valueDecimals: 2\n          }\n        }]\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    // Fetch Dow Jones data from Yahoo Finance API via RapidAPI\n    var options = {\n      method: 'GET',\n      url: 'https://yahoo-finance15.p.rapidapi.com/api/yahoo/qu/quote/DJI',\n      headers: {\n        'X-RapidAPI-Key': 'fxXmw9iGqmmshLaHC6Y4gdkfWRdwp1vi9FajsnDz',\n        // Replace with your RapidAPI key\n        'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'\n      }\n    };\n    axios.request(options).then(function (response) {\n      var data = _this.formatData(response.data); // Format and set the data\n      _this.chartOptions.series[0].data = data;\n    })[\"catch\"](function (error) {\n      console.error('Error fetching Dow Jones data:', error);\n    });\n  },\n  methods: {\n    formatData: function formatData(data) {\n      // Format the data according to the Highcharts series format\n      // Dow Jones data may require extracting date and price\n      // Example data format: [[timestamp, close_price], [timestamp, close_price], ...]\n\n      // Simulating response parsing for demonstration (you should adjust this based on the actual API response)\n      return data.chart.result[0].indicators.quote[0].close.map(function (close, index) {\n        var timestamp = data.chart.result[0].timestamp[index] * 1000; // Convert to milliseconds for Highcharts\n        return [timestamp, close];\n      });\n    }\n  }\n};","map":{"version":3,"names":["Highcharts","HighchartsVue","axios","components","highcharts","component","data","chartOptions","rangeSelector","selected","title","text","series","name","tooltip","valueDecimals","mounted","_this","options","method","url","headers","request","then","response","formatData","error","console","methods","chart","result","indicators","quote","close","map","index","timestamp"],"sources":["/home/shivam/Desktop/tradetrek/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <highcharts :options=\"chartOptions\"></highcharts>\n  </div>\n</template>\n\n<script>\nimport Highcharts from 'highcharts'\nimport HighchartsVue from 'highcharts-vue'\nimport axios from 'axios'\n\nexport default {\n  components: {\n    highcharts: HighchartsVue.component\n  },\n  data() {\n    return {\n      chartOptions: {\n        rangeSelector: {\n          selected: 1\n        },\n        title: {\n          text: 'Dow Jones Industrial Average (DJI)'\n        },\n        series: [{\n          name: 'Dow Jones',\n          data: [], // Dow Jones data will be populated here\n          tooltip: {\n            valueDecimals: 2\n          }\n        }]\n      }\n    }\n  },\n  mounted() {\n    // Fetch Dow Jones data from Yahoo Finance API via RapidAPI\n    const options = {\n      method: 'GET',\n      url: 'https://yahoo-finance15.p.rapidapi.com/api/yahoo/qu/quote/DJI',\n      headers: {\n        'X-RapidAPI-Key': 'fxXmw9iGqmmshLaHC6Y4gdkfWRdwp1vi9FajsnDz', // Replace with your RapidAPI key\n        'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'\n      }\n    };\n\n    axios.request(options)\n      .then(response => {\n        const data = this.formatData(response.data); // Format and set the data\n        this.chartOptions.series[0].data = data;\n      })\n      .catch(error => {\n        console.error('Error fetching Dow Jones data:', error);\n      });\n  },\n  methods: {\n    formatData(data) {\n      // Format the data according to the Highcharts series format\n      // Dow Jones data may require extracting date and price\n      // Example data format: [[timestamp, close_price], [timestamp, close_price], ...]\n\n      // Simulating response parsing for demonstration (you should adjust this based on the actual API response)\n      return data.chart.result[0].indicators.quote[0].close.map((close, index) => {\n        const timestamp = data.chart.result[0].timestamp[index] * 1000; // Convert to milliseconds for Highcharts\n        return [timestamp, close];\n      });\n    }\n  }\n}\n</script>\n"],"mappings":";;AAOA,OAAOA,UAAS,MAAO,YAAW;AAClC,OAAOC,aAAY,MAAO,gBAAe;AACzC,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,UAAU,EAAE;IACVC,UAAU,EAAEH,aAAa,CAACI;EAC5B,CAAC;EACDC,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;QACZC,aAAa,EAAE;UACbC,QAAQ,EAAE;QACZ,CAAC;QACDC,KAAK,EAAE;UACLC,IAAI,EAAE;QACR,CAAC;QACDC,MAAM,EAAE,CAAC;UACPC,IAAI,EAAE,WAAW;UACjBP,IAAI,EAAE,EAAE;UAAE;UACVQ,OAAO,EAAE;YACPC,aAAa,EAAE;UACjB;QACF,CAAC;MACH;IACF;EACF,CAAC;EACDC,OAAO,WAAPA,OAAOA,CAAA,EAAG;IAAA,IAAAC,KAAA;IACR;IACA,IAAMC,OAAM,GAAI;MACdC,MAAM,EAAE,KAAK;MACbC,GAAG,EAAE,+DAA+D;MACpEC,OAAO,EAAE;QACP,gBAAgB,EAAE,0CAA0C;QAAE;QAC9D,iBAAiB,EAAE;MACrB;IACF,CAAC;IAEDnB,KAAK,CAACoB,OAAO,CAACJ,OAAO,EAClBK,IAAI,CAAC,UAAAC,QAAO,EAAK;MAChB,IAAMlB,IAAG,GAAIW,KAAI,CAACQ,UAAU,CAACD,QAAQ,CAAClB,IAAI,CAAC,EAAE;MAC7CW,KAAI,CAACV,YAAY,CAACK,MAAM,CAAC,CAAC,CAAC,CAACN,IAAG,GAAIA,IAAI;IACzC,CAAC,UACK,CAAC,UAAAoB,KAAI,EAAK;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;EACN,CAAC;EACDE,OAAO,EAAE;IACPH,UAAU,WAAVA,UAAUA,CAACnB,IAAI,EAAE;MACf;MACA;MACA;;MAEA;MACA,OAAOA,IAAI,CAACuB,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,CAAC,UAACD,KAAK,EAAEE,KAAK,EAAK;QAC1E,IAAMC,SAAQ,GAAI9B,IAAI,CAACuB,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACM,SAAS,CAACD,KAAK,IAAI,IAAI,EAAE;QAChE,OAAO,CAACC,SAAS,EAAEH,KAAK,CAAC;MAC3B,CAAC,CAAC;IACJ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}