{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"dashboard\"\n};\nvar _hoisted_2 = {\n  \"class\": \"summary\"\n};\nvar _hoisted_3 = {\n  \"class\": \"trade-entry\"\n};\nvar _hoisted_4 = [\"value\"];\nvar _hoisted_5 = {\n  \"class\": \"trades-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[13] || (_cache[13] = _createElementVNode(\"h1\", null, \"Your Trading Dashboard\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Trade Summary\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"Total Trades: \" + _toDisplayString($options.totalTrades), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Profit/Loss: \" + _toDisplayString($options.profitLoss), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_3, [_cache[11] || (_cache[11] = _createElementVNode(\"h2\", null, \"Add a New Trade\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers(function () {\n      return $options.addTrade && $options.addTrade.apply($options, arguments);\n    }, [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    \"for\": \"company\"\n  }, \"Company:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.selectedCompany = $event;\n    }),\n    required: \"\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.companies, function (company) {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: company.id,\n      value: company.name\n    }, _toDisplayString(company.name), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedCompany]])]), _createElementVNode(\"div\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    \"for\": \"quantity\"\n  }, \"Quantity:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $data.quantity = $event;\n    }),\n    required: \"\",\n    min: \"1\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.quantity]])]), _createElementVNode(\"div\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    \"for\": \"buyPrice\"\n  }, \"Buy Price:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n      return $data.buyPrice = $event;\n    }),\n    required: \"\",\n    step: \"0.01\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.buyPrice]])]), _createElementVNode(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    \"for\": \"sellPrice\"\n  }, \"Sell Price:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = function ($event) {\n      return $data.sellPrice = $event;\n    }),\n    required: \"\",\n    step: \"0.01\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.sellPrice]])]), _cache[10] || (_cache[10] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Add Trade\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[12] || (_cache[12] = _createElementVNode(\"h2\", null, \"Your Trades\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.trades, function (trade) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: trade.id\n    }, _toDisplayString(trade.company) + \" - Qty: \" + _toDisplayString(trade.quantity) + \" | Buy: \" + _toDisplayString(trade.buyPrice) + \" | Sell: \" + _toDisplayString(trade.sellPrice) + \" | P/L: \" + _toDisplayString($options.calculateProfitLoss(trade)), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _cache[14] || (_cache[14] = _createElementVNode(\"div\", {\n    \"class\": \"chart\"\n  }, [_createElementVNode(\"h2\", null, \"Trading Chart\"), _createCommentVNode(\" Here you can integrate your TradingView chart component \"), _createElementVNode(\"div\", {\n    id: \"trading-chart\"\n  })], -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$options","totalTrades","profitLoss","_hoisted_3","onSubmit","_cache","_withModifiers","addTrade","apply","arguments","$event","$data","selectedCompany","required","_Fragment","_renderList","companies","company","key","id","value","name","_hoisted_4","type","quantity","min","buyPrice","step","sellPrice","_hoisted_5","trades","trade","calculateProfitLoss","_createCommentVNode"],"sources":["/home/shivam/Desktop/tradetrek/frontend/src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1>Your Trading Dashboard</h1>\n    \n    <div class=\"summary\">\n      <h2>Trade Summary</h2>\n      <p>Total Trades: {{ totalTrades }}</p>\n      <p>Profit/Loss: {{ profitLoss }}</p>\n    </div>\n\n    <div class=\"trade-entry\">\n      <h2>Add a New Trade</h2>\n      <form @submit.prevent=\"addTrade\">\n        <div>\n          <label for=\"company\">Company:</label>\n          <select v-model=\"selectedCompany\" required>\n            <option v-for=\"company in companies\" :key=\"company.id\" :value=\"company.name\">\n              {{ company.name }}\n            </option>\n          </select>\n        </div>\n        <div>\n          <label for=\"quantity\">Quantity:</label>\n          <input type=\"number\" v-model=\"quantity\" required min=\"1\" />\n        </div>\n        <div>\n          <label for=\"buyPrice\">Buy Price:</label>\n          <input type=\"number\" v-model=\"buyPrice\" required step=\"0.01\" />\n        </div>\n        <div>\n          <label for=\"sellPrice\">Sell Price:</label>\n          <input type=\"number\" v-model=\"sellPrice\" required step=\"0.01\" />\n        </div>\n        <button type=\"submit\">Add Trade</button>\n      </form>\n    </div>\n\n    <div class=\"trades-list\">\n      <h2>Your Trades</h2>\n      <ul>\n        <li v-for=\"trade in trades\" :key=\"trade.id\">\n          {{ trade.company }} - Qty: {{ trade.quantity }} | Buy: {{ trade.buyPrice }} | Sell: {{ trade.sellPrice }} | P/L: {{ calculateProfitLoss(trade) }}\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"chart\">\n      <h2>Trading Chart</h2>\n      <!-- Here you can integrate your TradingView chart component -->\n      <div id=\"trading-chart\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      selectedCompany: '',\n      quantity: 0,\n      buyPrice: 0,\n      sellPrice: 0,\n      companies: [\n        { id: 1, name: 'Company A' },\n        { id: 2, name: 'Company B' },\n        { id: 3, name: 'Company C' },\n      ],\n      trades: [],\n    };\n  },\n  computed: {\n    totalTrades() {\n      return this.trades.length;\n    },\n    profitLoss() {\n      return this.trades.reduce((total, trade) => total + this.calculateProfitLoss(trade), 0);\n    }\n  },\n  methods: {\n    addTrade() {\n      const newTrade = {\n        id: this.trades.length + 1,\n        company: this.selectedCompany,\n        quantity: this.quantity,\n        buyPrice: parseFloat(this.buyPrice),\n        sellPrice: parseFloat(this.sellPrice),\n      };\n      this.trades.push(newTrade);\n      // Reset fields after adding trade\n      this.selectedCompany = '';\n      this.quantity = 0;\n      this.buyPrice = 0;\n      this.sellPrice = 0;\n    },\n    calculateProfitLoss(trade) {\n      return (trade.sellPrice - trade.buyPrice) * trade.quantity;\n    },\n  },\n  mounted() {\n    // Here you can initialize your TradingView chart\n    const widget = new window.TradingView.widget({\n      container_id: \"trading-chart\",\n      width: \"100%\",\n      height: 400,\n      symbol: \"AAPL\",\n      interval: \"D\",\n      timezone: \"Etc/UTC\",\n      theme: \"light\",\n      style: \"1\",\n      toolbar_bg: \"#f1f3f6\",\n      enable_publishing: false,\n      allow_symbol_change: true,\n      details: true,\n      hotlist: true,\n      calendar: true,\n      news: [\n        \"headlines\",\n        \"stock\",\n        \"crypto\",\n        \"forex\",\n      ],\n    });\n  },\n};\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 20px;\n}\n\n.summary, .trade-entry, .trades-list, .chart {\n  margin-bottom: 20px;\n  padding: 15px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n\nh1, h2 {\n  color: #333;\n}\n\nform div {\n  margin-bottom: 10px;\n}\n\nlabel {\n  margin-right: 10px;\n}\n\nbutton {\n  padding: 8px 15px;\n  background-color: #35424a;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #2c3e50;\n}\n</style>\n"],"mappings":";;;;EACO,SAAM;AAAW;;EAGf,SAAM;AAAS;;EAMf,SAAM;AAAa;iBAV5B;;EAqCS,SAAM;AAAa;;uBApC1BA,mBAAA,CAkDM,OAlDNC,UAkDM,G,4BAjDJC,mBAAA,CAA+B,YAA3B,wBAAsB,sBAE1BA,mBAAA,CAIM,OAJNC,UAIM,G,0BAHJD,mBAAA,CAAsB,YAAlB,eAAa,sBACjBA,mBAAA,CAAsC,WAAnC,gBAAc,GAAAE,gBAAA,CAAGC,QAAA,CAAAC,WAAW,kBAC/BJ,mBAAA,CAAoC,WAAjC,eAAa,GAAAE,gBAAA,CAAGC,QAAA,CAAAE,UAAU,iB,GAG/BL,mBAAA,CAyBM,OAzBNM,UAyBM,G,4BAxBJN,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CAsBO;IAtBAO,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAZnBC,cAAA;MAAA,OAY6BN,QAAA,CAAAO,QAAA,IAAAP,QAAA,CAAAO,QAAA,CAAAC,KAAA,CAAAR,QAAA,EAAAS,SAAA,CAAQ;IAAA;MAC7BZ,mBAAA,CAOM,c,0BANJA,mBAAA,CAAqC;IAA9B,OAAI;EAAS,GAAC,UAAQ,sB,gBAC7BA,mBAAA,CAIS;IAnBnB,uBAAAQ,MAAA,QAAAA,MAAA,gBAAAK,MAAA;MAAA,OAe2BC,KAAA,CAAAC,eAAe,GAAAF,MAAA;IAAA;IAAEG,QAAQ,EAAR;yBAChClB,mBAAA,CAESmB,SAAA,QAlBrBC,WAAA,CAgBsCJ,KAAA,CAAAK,SAAS,EAhB/C,UAgB2BC,OAAO;yBAAtBtB,mBAAA,CAES;MAF6BuB,GAAG,EAAED,OAAO,CAACE,EAAE;MAAGC,KAAK,EAAEH,OAAO,CAACI;wBAClEJ,OAAO,CAACI,IAAI,wBAjB7BC,UAAA;2EAe2BX,KAAA,CAAAC,eAAe,E,KAMlCf,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAuC;IAAhC,OAAI;EAAU,GAAC,WAAS,sB,gBAC/BA,mBAAA,CAA2D;IAApD0B,IAAI,EAAC,QAAQ;IAvB9B,uBAAAlB,MAAA,QAAAA,MAAA,gBAAAK,MAAA;MAAA,OAuBwCC,KAAA,CAAAa,QAAQ,GAAAd,MAAA;IAAA;IAAEG,QAAQ,EAAR,EAAQ;IAACY,GAAG,EAAC;iDAAvBd,KAAA,CAAAa,QAAQ,E,KAExC3B,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAwC;IAAjC,OAAI;EAAU,GAAC,YAAU,sB,gBAChCA,mBAAA,CAA+D;IAAxD0B,IAAI,EAAC,QAAQ;IA3B9B,uBAAAlB,MAAA,QAAAA,MAAA,gBAAAK,MAAA;MAAA,OA2BwCC,KAAA,CAAAe,QAAQ,GAAAhB,MAAA;IAAA;IAAEG,QAAQ,EAAR,EAAQ;IAACc,IAAI,EAAC;iDAAxBhB,KAAA,CAAAe,QAAQ,E,KAExC7B,mBAAA,CAGM,c,0BAFJA,mBAAA,CAA0C;IAAnC,OAAI;EAAW,GAAC,aAAW,sB,gBAClCA,mBAAA,CAAgE;IAAzD0B,IAAI,EAAC,QAAQ;IA/B9B,uBAAAlB,MAAA,QAAAA,MAAA,gBAAAK,MAAA;MAAA,OA+BwCC,KAAA,CAAAiB,SAAS,GAAAlB,MAAA;IAAA;IAAEG,QAAQ,EAAR,EAAQ;IAACc,IAAI,EAAC;iDAAzBhB,KAAA,CAAAiB,SAAS,E,iCAEzC/B,mBAAA,CAAwC;IAAhC0B,IAAI,EAAC;EAAQ,GAAC,WAAS,qB,8BAInC1B,mBAAA,CAOM,OAPNgC,UAOM,G,4BANJhC,mBAAA,CAAoB,YAAhB,aAAW,sBACfA,mBAAA,CAIK,c,kBAHHF,mBAAA,CAEKmB,SAAA,QA1CbC,WAAA,CAwC4BJ,KAAA,CAAAmB,MAAM,EAxClC,UAwCmBC,KAAK;yBAAhBpC,mBAAA,CAEK;MAFwBuB,GAAG,EAAEa,KAAK,CAACZ;wBACnCY,KAAK,CAACd,OAAO,IAAG,UAAQ,GAAAlB,gBAAA,CAAGgC,KAAK,CAACP,QAAQ,IAAG,UAAQ,GAAAzB,gBAAA,CAAGgC,KAAK,CAACL,QAAQ,IAAG,WAAS,GAAA3B,gBAAA,CAAGgC,KAAK,CAACH,SAAS,IAAG,UAAQ,GAAA7B,gBAAA,CAAGC,QAAA,CAAAgC,mBAAmB,CAACD,KAAK;kEAKnJlC,mBAAA,CAIM;IAJD,SAAM;EAAO,IAChBA,mBAAA,CAAsB,YAAlB,eAAa,GACjBoC,mBAAA,6DAAgE,EAChEpC,mBAAA,CAA8B;IAAzBsB,EAAE,EAAC;EAAe,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}